#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExpressTMS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class ExpressTaxi : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppliedTax(AppliedTax instance);
    partial void UpdateAppliedTax(AppliedTax instance);
    partial void DeleteAppliedTax(AppliedTax instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertDocument_Type(Document_Type instance);
    partial void UpdateDocument_Type(Document_Type instance);
    partial void DeleteDocument_Type(Document_Type instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertFinancialTransaction(FinancialTransaction instance);
    partial void UpdateFinancialTransaction(FinancialTransaction instance);
    partial void DeleteFinancialTransaction(FinancialTransaction instance);
    partial void InsertParish(Parish instance);
    partial void UpdateParish(Parish instance);
    partial void DeleteParish(Parish instance);
    partial void InsertService_Type(Service_Type instance);
    partial void UpdateService_Type(Service_Type instance);
    partial void DeleteService_Type(Service_Type instance);
    partial void InsertUniqueNumber(UniqueNumber instance);
    partial void UpdateUniqueNumber(UniqueNumber instance);
    partial void DeleteUniqueNumber(UniqueNumber instance);
    partial void InsertVillage(Village instance);
    partial void UpdateVillage(Village instance);
    partial void DeleteVillage(Village instance);
    #endregion
		
		public ExpressTaxi(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExpressTaxi(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExpressTaxi(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExpressTaxi(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppliedTax> AppliedTaxes
		{
			get
			{
				return this.GetTable<AppliedTax>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Document_Type> Document_Types
		{
			get
			{
				return this.GetTable<Document_Type>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this.GetTable<FinancialTransaction>();
			}
		}
		
		public System.Data.Linq.Table<Parish> Parishes
		{
			get
			{
				return this.GetTable<Parish>();
			}
		}
		
		public System.Data.Linq.Table<Service_Type> Service_Types
		{
			get
			{
				return this.GetTable<Service_Type>();
			}
		}
		
		public System.Data.Linq.Table<UniqueNumber> UniqueNumbers
		{
			get
			{
				return this.GetTable<UniqueNumber>();
			}
		}
		
		public System.Data.Linq.Table<Village> Villages
		{
			get
			{
				return this.GetTable<Village>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="AppliedTaxes")]
	public partial class AppliedTax : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TaxName;
		
		private decimal _TaxAmount;
		
		private string _TaxDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaxNameChanging(string value);
    partial void OnTaxNameChanged();
    partial void OnTaxAmountChanging(decimal value);
    partial void OnTaxAmountChanged();
    partial void OnTaxDescriptionChanging(string value);
    partial void OnTaxDescriptionChanged();
    #endregion
		
		public AppliedTax()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxName", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TaxName
		{
			get
			{
				return this._TaxName;
			}
			set
			{
				if ((this._TaxName != value))
				{
					this.OnTaxNameChanging(value);
					this.SendPropertyChanging();
					this._TaxName = value;
					this.SendPropertyChanged("TaxName");
					this.OnTaxNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxAmount", DbType="Decimal(10,2) NOT NULL")]
		public decimal TaxAmount
		{
			get
			{
				return this._TaxAmount;
			}
			set
			{
				if ((this._TaxAmount != value))
				{
					this.OnTaxAmountChanging(value);
					this.SendPropertyChanging();
					this._TaxAmount = value;
					this.SendPropertyChanged("TaxAmount");
					this.OnTaxAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxDescription", DbType="NVarChar(50)")]
		public string TaxDescription
		{
			get
			{
				return this._TaxDescription;
			}
			set
			{
				if ((this._TaxDescription != value))
				{
					this.OnTaxDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TaxDescription = value;
					this.SendPropertyChanged("TaxDescription");
					this.OnTaxDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CMP_COD;
		
		private string _CMP_NAME;
		
		private string _CMP_ADDRESS;
		
		private string _VIL_NAME;
		
		private string _PAR_NAME;
		
		private string _COU_NAME;
		
		private string _CMP_PHONE;
		
		private string _CMP_FAX;
		
		private string _CMP_EMAIL;
		
		private System.DateTime _CMP_REG_DATE;
		
		private System.Nullable<System.DateTime> _LAST_MODIFIED;
		
		private EntitySet<FinancialTransaction> _FinancialTransactions;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Parish> _Parish;
		
		private EntityRef<Village> _Village;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCMP_CODChanging(int value);
    partial void OnCMP_CODChanged();
    partial void OnCMP_NAMEChanging(string value);
    partial void OnCMP_NAMEChanged();
    partial void OnCMP_ADDRESSChanging(string value);
    partial void OnCMP_ADDRESSChanged();
    partial void OnVIL_NAMEChanging(string value);
    partial void OnVIL_NAMEChanged();
    partial void OnPAR_NAMEChanging(string value);
    partial void OnPAR_NAMEChanged();
    partial void OnCOU_NAMEChanging(string value);
    partial void OnCOU_NAMEChanged();
    partial void OnCMP_PHONEChanging(string value);
    partial void OnCMP_PHONEChanged();
    partial void OnCMP_FAXChanging(string value);
    partial void OnCMP_FAXChanged();
    partial void OnCMP_EMAILChanging(string value);
    partial void OnCMP_EMAILChanged();
    partial void OnCMP_REG_DATEChanging(System.DateTime value);
    partial void OnCMP_REG_DATEChanged();
    partial void OnLAST_MODIFIEDChanging(System.Nullable<System.DateTime> value);
    partial void OnLAST_MODIFIEDChanged();
    #endregion
		
		public Company()
		{
			this._FinancialTransactions = new EntitySet<FinancialTransaction>(new Action<FinancialTransaction>(this.attach_FinancialTransactions), new Action<FinancialTransaction>(this.detach_FinancialTransactions));
			this._Country = default(EntityRef<Country>);
			this._Parish = default(EntityRef<Parish>);
			this._Village = default(EntityRef<Village>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_COD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CMP_COD
		{
			get
			{
				return this._CMP_COD;
			}
			set
			{
				if ((this._CMP_COD != value))
				{
					this.OnCMP_CODChanging(value);
					this.SendPropertyChanging();
					this._CMP_COD = value;
					this.SendPropertyChanged("CMP_COD");
					this.OnCMP_CODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CMP_NAME
		{
			get
			{
				return this._CMP_NAME;
			}
			set
			{
				if ((this._CMP_NAME != value))
				{
					this.OnCMP_NAMEChanging(value);
					this.SendPropertyChanging();
					this._CMP_NAME = value;
					this.SendPropertyChanged("CMP_NAME");
					this.OnCMP_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_ADDRESS", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CMP_ADDRESS
		{
			get
			{
				return this._CMP_ADDRESS;
			}
			set
			{
				if ((this._CMP_ADDRESS != value))
				{
					this.OnCMP_ADDRESSChanging(value);
					this.SendPropertyChanging();
					this._CMP_ADDRESS = value;
					this.SendPropertyChanged("CMP_ADDRESS");
					this.OnCMP_ADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIL_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string VIL_NAME
		{
			get
			{
				return this._VIL_NAME;
			}
			set
			{
				if ((this._VIL_NAME != value))
				{
					if (this._Village.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVIL_NAMEChanging(value);
					this.SendPropertyChanging();
					this._VIL_NAME = value;
					this.SendPropertyChanged("VIL_NAME");
					this.OnVIL_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PAR_NAME
		{
			get
			{
				return this._PAR_NAME;
			}
			set
			{
				if ((this._PAR_NAME != value))
				{
					if (this._Parish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPAR_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PAR_NAME = value;
					this.SendPropertyChanged("PAR_NAME");
					this.OnPAR_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COU_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string COU_NAME
		{
			get
			{
				return this._COU_NAME;
			}
			set
			{
				if ((this._COU_NAME != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOU_NAMEChanging(value);
					this.SendPropertyChanging();
					this._COU_NAME = value;
					this.SendPropertyChanged("COU_NAME");
					this.OnCOU_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_PHONE", DbType="NVarChar(15)")]
		public string CMP_PHONE
		{
			get
			{
				return this._CMP_PHONE;
			}
			set
			{
				if ((this._CMP_PHONE != value))
				{
					this.OnCMP_PHONEChanging(value);
					this.SendPropertyChanging();
					this._CMP_PHONE = value;
					this.SendPropertyChanged("CMP_PHONE");
					this.OnCMP_PHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_FAX", DbType="NVarChar(15)")]
		public string CMP_FAX
		{
			get
			{
				return this._CMP_FAX;
			}
			set
			{
				if ((this._CMP_FAX != value))
				{
					this.OnCMP_FAXChanging(value);
					this.SendPropertyChanging();
					this._CMP_FAX = value;
					this.SendPropertyChanged("CMP_FAX");
					this.OnCMP_FAXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_EMAIL", DbType="NVarChar(50)")]
		public string CMP_EMAIL
		{
			get
			{
				return this._CMP_EMAIL;
			}
			set
			{
				if ((this._CMP_EMAIL != value))
				{
					this.OnCMP_EMAILChanging(value);
					this.SendPropertyChanging();
					this._CMP_EMAIL = value;
					this.SendPropertyChanged("CMP_EMAIL");
					this.OnCMP_EMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_REG_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime CMP_REG_DATE
		{
			get
			{
				return this._CMP_REG_DATE;
			}
			set
			{
				if ((this._CMP_REG_DATE != value))
				{
					this.OnCMP_REG_DATEChanging(value);
					this.SendPropertyChanging();
					this._CMP_REG_DATE = value;
					this.SendPropertyChanged("CMP_REG_DATE");
					this.OnCMP_REG_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_MODIFIED", DbType="DateTime")]
		public System.Nullable<System.DateTime> LAST_MODIFIED
		{
			get
			{
				return this._LAST_MODIFIED;
			}
			set
			{
				if ((this._LAST_MODIFIED != value))
				{
					this.OnLAST_MODIFIEDChanging(value);
					this.SendPropertyChanging();
					this._LAST_MODIFIED = value;
					this.SendPropertyChanged("LAST_MODIFIED");
					this.OnLAST_MODIFIEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FinancialTransaction", Storage="_FinancialTransactions", ThisKey="CMP_COD", OtherKey="CMP_COD")]
		public EntitySet<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this._FinancialTransactions;
			}
			set
			{
				this._FinancialTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Country", ThisKey="COU_NAME", OtherKey="COU_NAME", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._COU_NAME = value.COU_NAME;
					}
					else
					{
						this._COU_NAME = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Company", Storage="_Parish", ThisKey="PAR_NAME", OtherKey="PAR_NAME", IsForeignKey=true)]
		public Parish Parish
		{
			get
			{
				return this._Parish.Entity;
			}
			set
			{
				Parish previousValue = this._Parish.Entity;
				if (((previousValue != value) 
							|| (this._Parish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parish.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Parish.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._PAR_NAME = value.PAR_NAME;
					}
					else
					{
						this._PAR_NAME = default(string);
					}
					this.SendPropertyChanged("Parish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Village_Company", Storage="_Village", ThisKey="VIL_NAME", OtherKey="VIL_NAME", IsForeignKey=true)]
		public Village Village
		{
			get
			{
				return this._Village.Entity;
			}
			set
			{
				Village previousValue = this._Village.Entity;
				if (((previousValue != value) 
							|| (this._Village.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Village.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Village.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._VIL_NAME = value.VIL_NAME;
					}
					else
					{
						this._VIL_NAME = default(string);
					}
					this.SendPropertyChanged("Village");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _COU_NAME;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Driver> _Drivers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOU_NAMEChanging(string value);
    partial void OnCOU_NAMEChanged();
    #endregion
		
		public Country()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COU_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string COU_NAME
		{
			get
			{
				return this._COU_NAME;
			}
			set
			{
				if ((this._COU_NAME != value))
				{
					this.OnCOU_NAMEChanging(value);
					this.SendPropertyChanging();
					this._COU_NAME = value;
					this.SendPropertyChanged("COU_NAME");
					this.OnCOU_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Company", Storage="_Companies", ThisKey="COU_NAME", OtherKey="COU_NAME")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Driver", Storage="_Drivers", ThisKey="COU_NAME", OtherKey="COU_NAME")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Document_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DOC_TYPE_NAME;
		
		private EntitySet<FinancialTransaction> _FinancialTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDOC_TYPE_NAMEChanging(string value);
    partial void OnDOC_TYPE_NAMEChanged();
    #endregion
		
		public Document_Type()
		{
			this._FinancialTransactions = new EntitySet<FinancialTransaction>(new Action<FinancialTransaction>(this.attach_FinancialTransactions), new Action<FinancialTransaction>(this.detach_FinancialTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOC_TYPE_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DOC_TYPE_NAME
		{
			get
			{
				return this._DOC_TYPE_NAME;
			}
			set
			{
				if ((this._DOC_TYPE_NAME != value))
				{
					this.OnDOC_TYPE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._DOC_TYPE_NAME = value;
					this.SendPropertyChanged("DOC_TYPE_NAME");
					this.OnDOC_TYPE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Type_FinancialTransaction", Storage="_FinancialTransactions", ThisKey="DOC_TYPE_NAME", OtherKey="DOC_TYPE_NAME")]
		public EntitySet<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this._FinancialTransactions;
			}
			set
			{
				this._FinancialTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Document_Type = this;
		}
		
		private void detach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Document_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DRV_COD;
		
		private string _DRV_LICENSE;
		
		private string _DRV_NAME;
		
		private string _DRV_ADDRESS;
		
		private string _VIL_NAME;
		
		private string _PAR_NAME;
		
		private string _COU_NAME;
		
		private string _DRV_PHONE;
		
		private string _DRV_CELL;
		
		private string _DRV_EMAIL;
		
		private System.DateTime _DRV_REG_DATE;
		
		private System.Nullable<System.DateTime> _LAST_MODIFIED;
		
		private EntitySet<FinancialTransaction> _FinancialTransactions;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Parish> _Parish;
		
		private EntityRef<Village> _Village;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDRV_CODChanging(int value);
    partial void OnDRV_CODChanged();
    partial void OnDRV_LICENSEChanging(string value);
    partial void OnDRV_LICENSEChanged();
    partial void OnDRV_NAMEChanging(string value);
    partial void OnDRV_NAMEChanged();
    partial void OnDRV_ADDRESSChanging(string value);
    partial void OnDRV_ADDRESSChanged();
    partial void OnVIL_NAMEChanging(string value);
    partial void OnVIL_NAMEChanged();
    partial void OnPAR_NAMEChanging(string value);
    partial void OnPAR_NAMEChanged();
    partial void OnCOU_NAMEChanging(string value);
    partial void OnCOU_NAMEChanged();
    partial void OnDRV_PHONEChanging(string value);
    partial void OnDRV_PHONEChanged();
    partial void OnDRV_CELLChanging(string value);
    partial void OnDRV_CELLChanged();
    partial void OnDRV_EMAILChanging(string value);
    partial void OnDRV_EMAILChanged();
    partial void OnDRV_REG_DATEChanging(System.DateTime value);
    partial void OnDRV_REG_DATEChanged();
    partial void OnLAST_MODIFIEDChanging(System.Nullable<System.DateTime> value);
    partial void OnLAST_MODIFIEDChanged();
    #endregion
		
		public Driver()
		{
			this._FinancialTransactions = new EntitySet<FinancialTransaction>(new Action<FinancialTransaction>(this.attach_FinancialTransactions), new Action<FinancialTransaction>(this.detach_FinancialTransactions));
			this._Country = default(EntityRef<Country>);
			this._Parish = default(EntityRef<Parish>);
			this._Village = default(EntityRef<Village>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_COD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DRV_COD
		{
			get
			{
				return this._DRV_COD;
			}
			set
			{
				if ((this._DRV_COD != value))
				{
					this.OnDRV_CODChanging(value);
					this.SendPropertyChanging();
					this._DRV_COD = value;
					this.SendPropertyChanged("DRV_COD");
					this.OnDRV_CODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_LICENSE", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string DRV_LICENSE
		{
			get
			{
				return this._DRV_LICENSE;
			}
			set
			{
				if ((this._DRV_LICENSE != value))
				{
					this.OnDRV_LICENSEChanging(value);
					this.SendPropertyChanging();
					this._DRV_LICENSE = value;
					this.SendPropertyChanged("DRV_LICENSE");
					this.OnDRV_LICENSEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DRV_NAME
		{
			get
			{
				return this._DRV_NAME;
			}
			set
			{
				if ((this._DRV_NAME != value))
				{
					this.OnDRV_NAMEChanging(value);
					this.SendPropertyChanging();
					this._DRV_NAME = value;
					this.SendPropertyChanged("DRV_NAME");
					this.OnDRV_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_ADDRESS", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DRV_ADDRESS
		{
			get
			{
				return this._DRV_ADDRESS;
			}
			set
			{
				if ((this._DRV_ADDRESS != value))
				{
					this.OnDRV_ADDRESSChanging(value);
					this.SendPropertyChanging();
					this._DRV_ADDRESS = value;
					this.SendPropertyChanged("DRV_ADDRESS");
					this.OnDRV_ADDRESSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIL_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string VIL_NAME
		{
			get
			{
				return this._VIL_NAME;
			}
			set
			{
				if ((this._VIL_NAME != value))
				{
					if (this._Village.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVIL_NAMEChanging(value);
					this.SendPropertyChanging();
					this._VIL_NAME = value;
					this.SendPropertyChanged("VIL_NAME");
					this.OnVIL_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string PAR_NAME
		{
			get
			{
				return this._PAR_NAME;
			}
			set
			{
				if ((this._PAR_NAME != value))
				{
					if (this._Parish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPAR_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PAR_NAME = value;
					this.SendPropertyChanged("PAR_NAME");
					this.OnPAR_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COU_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string COU_NAME
		{
			get
			{
				return this._COU_NAME;
			}
			set
			{
				if ((this._COU_NAME != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOU_NAMEChanging(value);
					this.SendPropertyChanging();
					this._COU_NAME = value;
					this.SendPropertyChanged("COU_NAME");
					this.OnCOU_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_PHONE", DbType="NVarChar(15)")]
		public string DRV_PHONE
		{
			get
			{
				return this._DRV_PHONE;
			}
			set
			{
				if ((this._DRV_PHONE != value))
				{
					this.OnDRV_PHONEChanging(value);
					this.SendPropertyChanging();
					this._DRV_PHONE = value;
					this.SendPropertyChanged("DRV_PHONE");
					this.OnDRV_PHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_CELL", DbType="NVarChar(15)")]
		public string DRV_CELL
		{
			get
			{
				return this._DRV_CELL;
			}
			set
			{
				if ((this._DRV_CELL != value))
				{
					this.OnDRV_CELLChanging(value);
					this.SendPropertyChanging();
					this._DRV_CELL = value;
					this.SendPropertyChanged("DRV_CELL");
					this.OnDRV_CELLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_EMAIL", DbType="NVarChar(50)")]
		public string DRV_EMAIL
		{
			get
			{
				return this._DRV_EMAIL;
			}
			set
			{
				if ((this._DRV_EMAIL != value))
				{
					this.OnDRV_EMAILChanging(value);
					this.SendPropertyChanging();
					this._DRV_EMAIL = value;
					this.SendPropertyChanged("DRV_EMAIL");
					this.OnDRV_EMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_REG_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime DRV_REG_DATE
		{
			get
			{
				return this._DRV_REG_DATE;
			}
			set
			{
				if ((this._DRV_REG_DATE != value))
				{
					this.OnDRV_REG_DATEChanging(value);
					this.SendPropertyChanging();
					this._DRV_REG_DATE = value;
					this.SendPropertyChanged("DRV_REG_DATE");
					this.OnDRV_REG_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_MODIFIED", DbType="DateTime")]
		public System.Nullable<System.DateTime> LAST_MODIFIED
		{
			get
			{
				return this._LAST_MODIFIED;
			}
			set
			{
				if ((this._LAST_MODIFIED != value))
				{
					this.OnLAST_MODIFIEDChanging(value);
					this.SendPropertyChanging();
					this._LAST_MODIFIED = value;
					this.SendPropertyChanged("LAST_MODIFIED");
					this.OnLAST_MODIFIEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_FinancialTransaction", Storage="_FinancialTransactions", ThisKey="DRV_COD", OtherKey="DRV_COD")]
		public EntitySet<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this._FinancialTransactions;
			}
			set
			{
				this._FinancialTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Driver", Storage="_Country", ThisKey="COU_NAME", OtherKey="COU_NAME", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._COU_NAME = value.COU_NAME;
					}
					else
					{
						this._COU_NAME = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Driver", Storage="_Parish", ThisKey="PAR_NAME", OtherKey="PAR_NAME", IsForeignKey=true)]
		public Parish Parish
		{
			get
			{
				return this._Parish.Entity;
			}
			set
			{
				Parish previousValue = this._Parish.Entity;
				if (((previousValue != value) 
							|| (this._Parish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parish.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Parish.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._PAR_NAME = value.PAR_NAME;
					}
					else
					{
						this._PAR_NAME = default(string);
					}
					this.SendPropertyChanged("Parish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Village_Driver", Storage="_Village", ThisKey="VIL_NAME", OtherKey="VIL_NAME", IsForeignKey=true)]
		public Village Village
		{
			get
			{
				return this._Village.Entity;
			}
			set
			{
				Village previousValue = this._Village.Entity;
				if (((previousValue != value) 
							|| (this._Village.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Village.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Village.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._VIL_NAME = value.VIL_NAME;
					}
					else
					{
						this._VIL_NAME = default(string);
					}
					this.SendPropertyChanged("Village");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class FinancialTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TRANS_COD;
		
		private int _DOC_NUM;
		
		private int _DRV_COD;
		
		private string _TRANS_DESTINATION;
		
		private string _SERV_NAME;
		
		private string _DOC_TYPE_NAME;
		
		private System.DateTime _TRANS_DATE;
		
		private System.DateTime _DOCUMENT_DATE;
		
		private decimal _TRANS_VALUE;
		
		private decimal _TRANS_REDUCTION;
		
		private decimal _TRANS_FINAL_VALUE;
		
		private string _VOUCHER_NUM;
		
		private int _NO_PAX;
		
		private string _TRANS_COMMENTS;
		
		private System.Nullable<System.DateTime> _LAST_MODIFIED;
		
		private int _CMP_COD;
		
		private bool _IsValid;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Document_Type> _Document_Type;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<Service_Type> _Service_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTRANS_CODChanging(int value);
    partial void OnTRANS_CODChanged();
    partial void OnDOC_NUMChanging(int value);
    partial void OnDOC_NUMChanged();
    partial void OnDRV_CODChanging(int value);
    partial void OnDRV_CODChanged();
    partial void OnTRANS_DESTINATIONChanging(string value);
    partial void OnTRANS_DESTINATIONChanged();
    partial void OnSERV_NAMEChanging(string value);
    partial void OnSERV_NAMEChanged();
    partial void OnDOC_TYPE_NAMEChanging(string value);
    partial void OnDOC_TYPE_NAMEChanged();
    partial void OnTRANS_DATEChanging(System.DateTime value);
    partial void OnTRANS_DATEChanged();
    partial void OnDOCUMENT_DATEChanging(System.DateTime value);
    partial void OnDOCUMENT_DATEChanged();
    partial void OnTRANS_VALUEChanging(decimal value);
    partial void OnTRANS_VALUEChanged();
    partial void OnTRANS_REDUCTIONChanging(decimal value);
    partial void OnTRANS_REDUCTIONChanged();
    partial void OnTRANS_FINAL_VALUEChanging(decimal value);
    partial void OnTRANS_FINAL_VALUEChanged();
    partial void OnVOUCHER_NUMChanging(string value);
    partial void OnVOUCHER_NUMChanged();
    partial void OnNO_PAXChanging(int value);
    partial void OnNO_PAXChanged();
    partial void OnTRANS_COMMENTSChanging(string value);
    partial void OnTRANS_COMMENTSChanged();
    partial void OnLAST_MODIFIEDChanging(System.Nullable<System.DateTime> value);
    partial void OnLAST_MODIFIEDChanged();
    partial void OnCMP_CODChanging(int value);
    partial void OnCMP_CODChanged();
    partial void OnIsValidChanging(bool value);
    partial void OnIsValidChanged();
    #endregion
		
		public FinancialTransaction()
		{
			this._Company = default(EntityRef<Company>);
			this._Document_Type = default(EntityRef<Document_Type>);
			this._Driver = default(EntityRef<Driver>);
			this._Service_Type = default(EntityRef<Service_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_COD", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TRANS_COD
		{
			get
			{
				return this._TRANS_COD;
			}
			set
			{
				if ((this._TRANS_COD != value))
				{
					this.OnTRANS_CODChanging(value);
					this.SendPropertyChanging();
					this._TRANS_COD = value;
					this.SendPropertyChanged("TRANS_COD");
					this.OnTRANS_CODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOC_NUM", DbType="Int NOT NULL")]
		public int DOC_NUM
		{
			get
			{
				return this._DOC_NUM;
			}
			set
			{
				if ((this._DOC_NUM != value))
				{
					this.OnDOC_NUMChanging(value);
					this.SendPropertyChanging();
					this._DOC_NUM = value;
					this.SendPropertyChanged("DOC_NUM");
					this.OnDOC_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DRV_COD", DbType="Int NOT NULL")]
		public int DRV_COD
		{
			get
			{
				return this._DRV_COD;
			}
			set
			{
				if ((this._DRV_COD != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDRV_CODChanging(value);
					this.SendPropertyChanging();
					this._DRV_COD = value;
					this.SendPropertyChanged("DRV_COD");
					this.OnDRV_CODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_DESTINATION", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string TRANS_DESTINATION
		{
			get
			{
				return this._TRANS_DESTINATION;
			}
			set
			{
				if ((this._TRANS_DESTINATION != value))
				{
					this.OnTRANS_DESTINATIONChanging(value);
					this.SendPropertyChanging();
					this._TRANS_DESTINATION = value;
					this.SendPropertyChanged("TRANS_DESTINATION");
					this.OnTRANS_DESTINATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERV_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SERV_NAME
		{
			get
			{
				return this._SERV_NAME;
			}
			set
			{
				if ((this._SERV_NAME != value))
				{
					if (this._Service_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSERV_NAMEChanging(value);
					this.SendPropertyChanging();
					this._SERV_NAME = value;
					this.SendPropertyChanged("SERV_NAME");
					this.OnSERV_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOC_TYPE_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DOC_TYPE_NAME
		{
			get
			{
				return this._DOC_TYPE_NAME;
			}
			set
			{
				if ((this._DOC_TYPE_NAME != value))
				{
					if (this._Document_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDOC_TYPE_NAMEChanging(value);
					this.SendPropertyChanging();
					this._DOC_TYPE_NAME = value;
					this.SendPropertyChanged("DOC_TYPE_NAME");
					this.OnDOC_TYPE_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime TRANS_DATE
		{
			get
			{
				return this._TRANS_DATE;
			}
			set
			{
				if ((this._TRANS_DATE != value))
				{
					this.OnTRANS_DATEChanging(value);
					this.SendPropertyChanging();
					this._TRANS_DATE = value;
					this.SendPropertyChanged("TRANS_DATE");
					this.OnTRANS_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOCUMENT_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime DOCUMENT_DATE
		{
			get
			{
				return this._DOCUMENT_DATE;
			}
			set
			{
				if ((this._DOCUMENT_DATE != value))
				{
					this.OnDOCUMENT_DATEChanging(value);
					this.SendPropertyChanging();
					this._DOCUMENT_DATE = value;
					this.SendPropertyChanged("DOCUMENT_DATE");
					this.OnDOCUMENT_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_VALUE", DbType="Decimal(10,2) NOT NULL")]
		public decimal TRANS_VALUE
		{
			get
			{
				return this._TRANS_VALUE;
			}
			set
			{
				if ((this._TRANS_VALUE != value))
				{
					this.OnTRANS_VALUEChanging(value);
					this.SendPropertyChanging();
					this._TRANS_VALUE = value;
					this.SendPropertyChanged("TRANS_VALUE");
					this.OnTRANS_VALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_REDUCTION", DbType="Decimal(10,2) NOT NULL")]
		public decimal TRANS_REDUCTION
		{
			get
			{
				return this._TRANS_REDUCTION;
			}
			set
			{
				if ((this._TRANS_REDUCTION != value))
				{
					this.OnTRANS_REDUCTIONChanging(value);
					this.SendPropertyChanging();
					this._TRANS_REDUCTION = value;
					this.SendPropertyChanged("TRANS_REDUCTION");
					this.OnTRANS_REDUCTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_FINAL_VALUE", DbType="Decimal(10,2) NOT NULL")]
		public decimal TRANS_FINAL_VALUE
		{
			get
			{
				return this._TRANS_FINAL_VALUE;
			}
			set
			{
				if ((this._TRANS_FINAL_VALUE != value))
				{
					this.OnTRANS_FINAL_VALUEChanging(value);
					this.SendPropertyChanging();
					this._TRANS_FINAL_VALUE = value;
					this.SendPropertyChanged("TRANS_FINAL_VALUE");
					this.OnTRANS_FINAL_VALUEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VOUCHER_NUM", DbType="NVarChar(10)")]
		public string VOUCHER_NUM
		{
			get
			{
				return this._VOUCHER_NUM;
			}
			set
			{
				if ((this._VOUCHER_NUM != value))
				{
					this.OnVOUCHER_NUMChanging(value);
					this.SendPropertyChanging();
					this._VOUCHER_NUM = value;
					this.SendPropertyChanged("VOUCHER_NUM");
					this.OnVOUCHER_NUMChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NO_PAX", DbType="Int NOT NULL")]
		public int NO_PAX
		{
			get
			{
				return this._NO_PAX;
			}
			set
			{
				if ((this._NO_PAX != value))
				{
					this.OnNO_PAXChanging(value);
					this.SendPropertyChanging();
					this._NO_PAX = value;
					this.SendPropertyChanged("NO_PAX");
					this.OnNO_PAXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TRANS_COMMENTS", DbType="NVarChar(300)")]
		public string TRANS_COMMENTS
		{
			get
			{
				return this._TRANS_COMMENTS;
			}
			set
			{
				if ((this._TRANS_COMMENTS != value))
				{
					this.OnTRANS_COMMENTSChanging(value);
					this.SendPropertyChanging();
					this._TRANS_COMMENTS = value;
					this.SendPropertyChanged("TRANS_COMMENTS");
					this.OnTRANS_COMMENTSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAST_MODIFIED", DbType="DateTime")]
		public System.Nullable<System.DateTime> LAST_MODIFIED
		{
			get
			{
				return this._LAST_MODIFIED;
			}
			set
			{
				if ((this._LAST_MODIFIED != value))
				{
					this.OnLAST_MODIFIEDChanging(value);
					this.SendPropertyChanging();
					this._LAST_MODIFIED = value;
					this.SendPropertyChanged("LAST_MODIFIED");
					this.OnLAST_MODIFIEDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CMP_COD", DbType="Int NOT NULL")]
		public int CMP_COD
		{
			get
			{
				return this._CMP_COD;
			}
			set
			{
				if ((this._CMP_COD != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCMP_CODChanging(value);
					this.SendPropertyChanging();
					this._CMP_COD = value;
					this.SendPropertyChanged("CMP_COD");
					this.OnCMP_CODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isValid", Storage="_IsValid", DbType="Bit NOT NULL")]
		public bool IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FinancialTransaction", Storage="_Company", ThisKey="CMP_COD", OtherKey="CMP_COD", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FinancialTransactions.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FinancialTransactions.Add(this);
						this._CMP_COD = value.CMP_COD;
					}
					else
					{
						this._CMP_COD = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Type_FinancialTransaction", Storage="_Document_Type", ThisKey="DOC_TYPE_NAME", OtherKey="DOC_TYPE_NAME", IsForeignKey=true)]
		public Document_Type Document_Type
		{
			get
			{
				return this._Document_Type.Entity;
			}
			set
			{
				Document_Type previousValue = this._Document_Type.Entity;
				if (((previousValue != value) 
							|| (this._Document_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document_Type.Entity = null;
						previousValue.FinancialTransactions.Remove(this);
					}
					this._Document_Type.Entity = value;
					if ((value != null))
					{
						value.FinancialTransactions.Add(this);
						this._DOC_TYPE_NAME = value.DOC_TYPE_NAME;
					}
					else
					{
						this._DOC_TYPE_NAME = default(string);
					}
					this.SendPropertyChanged("Document_Type");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_FinancialTransaction", Storage="_Driver", ThisKey="DRV_COD", OtherKey="DRV_COD", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.FinancialTransactions.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.FinancialTransactions.Add(this);
						this._DRV_COD = value.DRV_COD;
					}
					else
					{
						this._DRV_COD = default(int);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Type_FinancialTransaction", Storage="_Service_Type", ThisKey="SERV_NAME", OtherKey="SERV_NAME", IsForeignKey=true)]
		public Service_Type Service_Type
		{
			get
			{
				return this._Service_Type.Entity;
			}
			set
			{
				Service_Type previousValue = this._Service_Type.Entity;
				if (((previousValue != value) 
							|| (this._Service_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service_Type.Entity = null;
						previousValue.FinancialTransactions.Remove(this);
					}
					this._Service_Type.Entity = value;
					if ((value != null))
					{
						value.FinancialTransactions.Add(this);
						this._SERV_NAME = value.SERV_NAME;
					}
					else
					{
						this._SERV_NAME = default(string);
					}
					this.SendPropertyChanged("Service_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Parish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PAR_NAME;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Driver> _Drivers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPAR_NAMEChanging(string value);
    partial void OnPAR_NAMEChanged();
    #endregion
		
		public Parish()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PAR_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PAR_NAME
		{
			get
			{
				return this._PAR_NAME;
			}
			set
			{
				if ((this._PAR_NAME != value))
				{
					this.OnPAR_NAMEChanging(value);
					this.SendPropertyChanging();
					this._PAR_NAME = value;
					this.SendPropertyChanged("PAR_NAME");
					this.OnPAR_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Company", Storage="_Companies", ThisKey="PAR_NAME", OtherKey="PAR_NAME")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parish_Driver", Storage="_Drivers", ThisKey="PAR_NAME", OtherKey="PAR_NAME")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Parish = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Parish = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Parish = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Parish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Service_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SERV_NAME;
		
		private EntitySet<FinancialTransaction> _FinancialTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSERV_NAMEChanging(string value);
    partial void OnSERV_NAMEChanged();
    #endregion
		
		public Service_Type()
		{
			this._FinancialTransactions = new EntitySet<FinancialTransaction>(new Action<FinancialTransaction>(this.attach_FinancialTransactions), new Action<FinancialTransaction>(this.detach_FinancialTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SERV_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SERV_NAME
		{
			get
			{
				return this._SERV_NAME;
			}
			set
			{
				if ((this._SERV_NAME != value))
				{
					this.OnSERV_NAMEChanging(value);
					this.SendPropertyChanging();
					this._SERV_NAME = value;
					this.SendPropertyChanged("SERV_NAME");
					this.OnSERV_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Type_FinancialTransaction", Storage="_FinancialTransactions", ThisKey="SERV_NAME", OtherKey="SERV_NAME")]
		public EntitySet<FinancialTransaction> FinancialTransactions
		{
			get
			{
				return this._FinancialTransactions;
			}
			set
			{
				this._FinancialTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Service_Type = this;
		}
		
		private void detach_FinancialTransactions(FinancialTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Service_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="UniqueNumbers")]
	public partial class UniqueNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UniqueName;
		
		private int _UniqueValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnUniqueValueChanging(int value);
    partial void OnUniqueValueChanged();
    #endregion
		
		public UniqueNumber()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueName", DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueValue", DbType="Int NOT NULL")]
		public int UniqueValue
		{
			get
			{
				return this._UniqueValue;
			}
			set
			{
				if ((this._UniqueValue != value))
				{
					this.OnUniqueValueChanging(value);
					this.SendPropertyChanging();
					this._UniqueValue = value;
					this.SendPropertyChanged("UniqueValue");
					this.OnUniqueValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Village : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _VIL_NAME;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Driver> _Drivers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIL_NAMEChanging(string value);
    partial void OnVIL_NAMEChanged();
    #endregion
		
		public Village()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIL_NAME", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string VIL_NAME
		{
			get
			{
				return this._VIL_NAME;
			}
			set
			{
				if ((this._VIL_NAME != value))
				{
					this.OnVIL_NAMEChanging(value);
					this.SendPropertyChanging();
					this._VIL_NAME = value;
					this.SendPropertyChanged("VIL_NAME");
					this.OnVIL_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Village_Company", Storage="_Companies", ThisKey="VIL_NAME", OtherKey="VIL_NAME")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Village_Driver", Storage="_Drivers", ThisKey="VIL_NAME", OtherKey="VIL_NAME")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Village = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Village = null;
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Village = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Village = null;
		}
	}
}
#pragma warning restore 1591
